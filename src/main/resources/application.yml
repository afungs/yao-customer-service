spring:
  jackson:
    # 设置属性命名策略,对应jackson下PropertyNamingStrategy中的常量值，SNAKE_CASE-返回的json驼峰式转下划线，json body下划线传到后端自动转驼峰式
    property-naming-strategy: SNAKE_CASE
    # 全局设置@JsonFormat的格式pattern
    date-format: yyyy-MM-dd HH:mm:ss
    # 当地时区
    locale: zh
    # 设置全局时区
    time-zone: GMT+8
    # 常用，全局设置pojo或被@JsonInclude注解的属性的序列化方式
    default-property-inclusion: CUSTOM #不为空的属性才会序列化,具体属性可看JsonInclude.Include
    # 常规默认,枚举类SerializationFeature中的枚举属性为key，值为boolean设置jackson序列化特性,具体key请看SerializationFeature源码
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: true # 返回的java.util.date转换成timestamp
      FAIL_ON_EMPTY_BEANS: true # 对象为空时是否报错，默认true
    # 枚举类DeserializationFeature中的枚举属性为key，值为boolean设置jackson反序列化特性,具体key请看DeserializationFeature源码
    deserialization:
      # 常用,json中含pojo不存在属性时是否失败报错,默认true
      FAIL_ON_UNKNOWN_PROPERTIES: false
    # 枚举类MapperFeature中的枚举属性为key，值为boolean设置jackson ObjectMapper特性
    # ObjectMapper在jackson中负责json的读写、json与pojo的互转、json tree的互转,具体特性请看MapperFeature,常规默认即可
    mapper:
      # 使用getter取代setter探测属性，如类中含getName()但不包含name属性与setName()，传输的vo json格式模板中依旧含name属性
      USE_GETTERS_AS_SETTERS: true #默认false
    # 枚举类JsonParser.Feature枚举类中的枚举属性为key，值为boolean设置jackson JsonParser特性
    # JsonParser在jackson中负责json内容的读取,具体特性请看JsonParser.Feature，一般无需设置默认即可
    parser:
      ALLOW_SINGLE_QUOTES: true # 是否允许出现单引号,默认false
    # 枚举类JsonGenerator.Feature枚举类中的枚举属性为key，值为boolean设置jackson JsonGenerator特性，一般无需设置默认即可
    # JsonGenerator在jackson中负责编写json内容,具体特性请看JsonGenerator.Feature
  profiles:
    active: dev
  redis:
    database: 0
    host: 127.0.0.1
    password:
    port: 6379
    ssl: false
    jedis:
      pool:
        max-idle: 10
        max-wait: 60000
  datasource:
    url: jdbc:mysql://localhost:3306/customer_service?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 8
      min-idle: 1
      max-active: 20
      max-wait: 60000
      time-between-eviction-runsMillis: 60000
      min-evictable-idle-timeMillis: 300000
      validation-query: select 'x' FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-open-prepared-statements: 20
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      use-global-data-source-stat: true
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
  resources:
    static-locations: classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:${upload-path:d:/img}
  servlet:
    multipart:
#     上传文件大小
      max-file-size: 10MB
  mvc:
    static-path-pattern: /static/**

upload-path: d:/img
web-url: www.anfun.xyz
redis:
  channel:
    msgToAll: websocket.msgToAll
  # 客服在线列表
  customer-service-key: customerServices
  # 客户在线列表
  users-key: users

server:
  port: 8801

crypt:
  key: www.aufun.xyzxaw
  iv: 123456789abckerf

###################  spring配置  ###################

#logging:
#  level:
#    org.springframework.web.servlet: ERROR
#spring:
#  profiles: dev
#
#logging:
#  level:
#    ROOT: INFO
#    com:
#      xncoding: DEBUG
#  file: D:/logs/pos-api.log
logging:
  file:
    path: d:/
#  level:
#    root: WARN
#    org:
#      springframework:
#        security: DEBUG
#        web: ERROR
#      hibernate: DEBUG
#      apache:
#        commons:
#          dbcp2: DEBUG
